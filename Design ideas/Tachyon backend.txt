
GET to '/display'
 - Gives all url's, their titles, and mobile checks from database

____________________________________________________________________________

GET to '/metrics/:url'
 - Use puppeteer to run lighthouse on url
 - Take a screenshot of the url and store in image folder as the title of the page grabbed with puppeteer again and .jpg at the end (title.jpg)
 - Grabs the HTML report and stores it in lighthouse folder as the title of the page grabbed with puppeteer again and .html at the end (title.html)
 - return the filepath, the performance score, and the accessibility score

GET to '/m/metrics/:url'
 - Use puppeteer to run lighthouse on url with isMobile tag
 - Take a screenshot of the url and store in image folder as the title of the page grabbed with puppeteer again and .jpg at the end (title.jpg)
 - Grabs the HTML report and stores it in lighthouse folder as the title of the page grabbed with puppeteer again and .html at the end (title.html)
 - return the filepath, the performance score, and the accessibility score

____________________________________________________________________________

GET to '/report/:html'
 - serves the html file to the page from reports folder

____________________________________________________________________________

GET to '/'
 - Clear all files from image folder and from reports folder

____________________________________________________________________________

POST to '/addURL'
 - stores title of the page using puppeteer to database as well as URL and isMobile = false
   use 'page._frameManager._mainFrame.evaluate(() => document.title)' to scrape the title
   can also use await page.title()
 - returns the new object

POST to '/m/addURL'
 - stores title of the page using puppeteer to database as well as URL and isMobile = true
   use 'page._frameManager._mainFrame.evaluate(() => document.title)' to scrape the title
   can also use await page.title()
 - returns the new object

____________________________________________________________________________

DELETE to '/delete/:id'
 - deletes id and its corresponding data from database

